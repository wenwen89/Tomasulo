Tomasulo Algorithm Simulator

We implemented the program of tomasulo by simulating 
the different components inside the processor, and 
the main function will call all of them in a 
cycle-based while-loop. The order of calling for 
different component is based on the pipeline stage 
of “issue”, “execute”, “memory”, “write back” and 
“commit”. The implementation framework that has been 
developed till now has been discussed briefly: 

1. parser – This allows us to parse an input text 
file provided in a particular format and configure 
the processor and initialize register files and memory 
locations with initial values. 

2. main – This is a function which contains a ROB, 
ARF, RAT, FU, LD_ST_QUEUE, timing and driver function 
for the Tomasulo algorithm. 

3. ROB – This class models the Re-Order Buffer 
required for in-order commit of instructions and 
register renaming. 

4. ARF – This class models the Architecture register 
File, which represent the state of the ISA register 
till the last committed instruction. 

5. RAT – This class models the Register Alias Table. 
It keeps the mapping of the actual physical registers 
with the names assigned to them during register renaming. 

6. FU – This class represents the functional units and 
the functions they perform. 

7. RS – This class represents the reservation stations 
and their functions. 

8. LD_ST_QUEUE – This class models the load-store queue 
used for load-store forwarding and memory disambiguation. 

9. BRN - This class models the branch unit for the processor. 

10. CDB – This class models the only one cdb in the processor. 

11. global- This class contains members that are used by 
all the previous classes like Instruction formats, 
configuration of processor, etc.. 

12. print- This is a major class for formatting the 
output of instructions timing.

Authors: Wen Wen (wew55@pitt.edu), 
         Joydeep Rakshit (jor73@pitt.edu), 
         Lu Zhang (luz14@pitt.edu)


Parser:

The parser takes a text input file in the following format:

#alu.config
                 # of rs   Cycles in EXEC   Cycles in Mem    # of FUs
Integer adder      2            1                                1
FP adder           3            3                                1
FP multiplier      2            20                               1
Load/store unit    3            1               4                1
#mem.ini
ROB entries = 128
R1=10, R2=20, F2=30.1
Mem[4]=1, Mem[8]=2, Mem[12]=3.4
#assembly
add.d F1, F2, F3
ld F4, 8(R1)
bne R2, R3, -3

It parses this input file and updates the configuration class with 
the provided configuration from the input file, initializes the integer, 
floating point registers, and memory locations along with filling the 
instruction queue with the provided instructions.

Parser Output:

Inputfile ./sample.input is open.
############### Parsing Start #################
Parsing line #: 0
Parsing alu.config start:
Parsing line #: 1
Parsing line #: 2
Integer_adder's_rs_# = 2
Integer_adder's_ex_cycle_# = 1
Integer_adder's_fu_# = 1
Parsing line #: 3
FP_adder's_rs_# = 3
FP_adder's_ex_cycle # = 3
FP_adder's_fu_#_= 1
Parsing line #: 4
FP_mul's_rs_# = 2
FP_mul's_ex_cycle_# = 20
FP_mul's_fu_#_= 1
Parsing line #: 5
FP_ld/st's_rs_# = 3
FP_ld/st's_ex_cycle_# = 1
FP_ld/st's_mem_cycle_# = 4
FP_ld/st's_fu_# = 1
Parsing line #: 6
Parsing mem.ini start:
Parsing line #: 7
ROB_entries_# = 128
Parsing line #: 8
Integer Register initialization>> index:1 value:10
Integer Register initialization>> index:2 value:20
FP Register initialization>> index:2 value:30.1
Parsing line #: 9
Memory initialization>>
Memory initialization>> index:4 value:1
Memory initialization>> index:8 value:2
Memory initialization>> index:12 value:3.4
Parsing line #: 10
Parsing assembly start:
Parsing line #: 11
Read assembly instructions>> id:0 instr_name:Add.d Dest_reg: 1 Source_reg_left: 2 Source_reg_right: 3
Parsing line #: 12
Read assembly instructions>> id:1 instr_name:Ld Dest_reg: 4 Source_reg_left: 8 Source_reg_right: 1
Parsing line #: 13
Read assembly instructions>> id:2 instr_name:Bne Dest_reg: 2 Source_reg_left: 3 Source_reg_right: -3
############### Parsing Complete #################
 
Compilation Instruction
We implemented our program of tomasulo algorithm with C++ in Linux OS. 
The development tools are based on GNU G++/GDB. Compilation steps:

1.	The program is tested and compiled on Ubuntu and MacOS with G++ and CLANG++.

2.	Cd to source code folder,  run the command of “make” for written 
Makefile, and the output executable file is named as “tomasolu” in the ./bin/.

3.	In the folder of source code, run the ./bin/tomasulo <inputfile>, 
the <inputfile> is the inputfile including the initialized configuration and assembly codes.

4.	Testcases are located in the folder of testcases.

5.	The output instruction timing will be on the screen.


Sample Outputs

#alu.config
                 # of rs      Cycles in EX     Cycles in Mem         # of FUs
Integer adder      3                1                                   1
FP adder           3                3                                   1
FP multiplier      2                20                                  1
Load/store unit    3                1               4                   1
#mem.ini
ROB entries = 128
R1=40, R2=20, R3=2, R4=20, R5=0, F2=30.1, F3=2, F4=1.1, F1=3.2
Mem[26]=1, Mem[8]=2, Mem[18]=3.4
#assembly
sd F4, 16(R3)
ld F5, -2(R2)
add.d F5, F2, F5

The result of our simulation time table and non-zero registers and MEMs are as below:

	     ----------------------- Timing Table -----------------------------
INSTRUCTIONS       ISSUE        EXEC(BEG)     EXEC(END)     MEM(BEG)     MEM(END)       WB     COMMIT
Sd F4, 16 (R3)        0      	     1            1           --           --           --       7
Ld F5, -2 (R2)        1      	     2            2            3            3           4        8
Add.d F5, F2, F5      2      	     5            7           --           --           8        9


	
	     ----------------------- Registers -----------------------------
R[1]40	R[2]20	R[3]2	R[4]20

F[1]3.2	F[2]30.1	F[3]2	F[4]1.1	F[5]33.5



	     ----------------------- Data Mem -----------------------------
D_MEM[32]2	D_MEM[72]1.1	D_MEM[104]1	
